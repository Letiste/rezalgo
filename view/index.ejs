<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="public/lib/codemirror.js"/></script>
    <% Object.keys(languages).forEach(language => { %>
      <script src="<%= `public/mode/${languages[language].name}/${languages[language].name}.js` %> "/></script>
    <% }) %>
    <link rel="stylesheet" href="public/lib/codemirror.css">
    <% themes.forEach(theme => { %>
     <link rel="stylesheet" href="<%= `public/theme/${theme}.css` %> ">
    <% }) %>
    <title><%- challenge.name %></title>
    <style>
      .CodeMirror * {
        font-size: 14px;
        line-height: 19px;
      }
    </style>
  </head>
  <body>
    <h1><%- challenge.name %> </h1>
    <p><%- challenge.description %> </p>
    <button onclick="runCode()">Run code</button>
    <select id="language" onchange="switchHelpers(this)">
      <% Object.keys(languages).forEach(language => {%>
      <option value="<%= language %>" ><%= languages[language].name %></option>
      <% }) %>
    </select>
    <select id="fontSize" onchange="switchFontSize(this.value)">
      <% for( let index = 0; index < 10; index++ ) { %>
        <option value="<%= 10 + 2 * index %>" <%= index === 2 ? "selected" : "" %>><%= 10 + 2 * index %></option>
      <% } %>
    </select>
    <select id="theme" onchange="switchTheme(this.value)">
      <option value="default" selected>default</option>
    <% themes.forEach(theme => { %>
      <option value="<%= theme %> "><%= theme %> </option>
    <% }) %>
    </select>
    <button onclick="resetCode()">Reset</button>
    <textarea id="data"></textarea>
    <p style="color: green" id="success"></p>
    <p id="stdout"></p>
    <p style="color: red" id="stderr"></p>
  </body>
  <script>
    const helpers = <%- JSON.stringify(helpers) %>
    const textArea = document.getElementById('data')
    let selectedLanguage = localStorage.getItem("selectedLanguage") || "js"
    const selectLanguage = document.getElementById("language")
    selectLanguage.selectedIndex = Array.from(selectLanguage.options).find(option => option.value === selectedLanguage).index
    const theme = localStorage.getItem("theme") || "default"
    const mode = localStorage.getItem("mode") || "javascript"
    const fontSize = localStorage.getItem("fontSize") || "14"

    const myCodeMirrorOptions = {
      mode,
      lineNumbers: true,
      tabSize: 2
    }
    const myCodeMirror = CodeMirror.fromTextArea(textArea, myCodeMirrorOptions)
    const codeMirrorStyle = Array.from(document.styleSheets).find(ss => !ss.href).cssRules[0].style
    myCodeMirror.setValue(localStorage.getItem(selectedLanguage) || helpers[selectedLanguage])

    function switchFontSize(fontSize) {
      codeMirrorStyle.fontSize = `${fontSize}px`
      codeMirrorStyle.lineHeight = `${Number(fontSize) + 5}px`
      myCodeMirror.refresh()
      localStorage.setItem("fontSize", fontSize)
    }

    switchFontSize(fontSize)
    document.getElementById("fontSize").value = fontSize

    function switchTheme(theme) {
      myCodeMirror.setOption("theme", theme)
      myCodeMirror.refresh()
      localStorage.setItem("theme", theme)
    }

    switchTheme(theme)
    document.getElementById("theme").value = theme

    function switchHelpers(select) {
      const language = select[select.selectedIndex]
      localStorage.setItem(selectedLanguage, myCodeMirror.getValue())
      myCodeMirror.setValue(localStorage.getItem(language.value) || helpers[language.value])
      myCodeMirror.setOption("mode", language.text)
      selectedLanguage = language.value
      myCodeMirror.refresh()
      localStorage.setItem("selectedLanguage", selectedLanguage)
      localStorage.setItem("mode", language.text)
    }

    function resetCode() {
      myCodeMirror.setValue(helpers[selectedLanguage])
      myCodeMirror.refresh()
      localStorage.removeItem(selectedLanguage)
    }

    async function runCode() {
      try {
        const data = myCodeMirror.getValue();
        const rawResponse = await fetch(
          'http://localhost:3000/<%= challenge.functionName %>',
          {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              language: selectedLanguage,
              data,
            }),
          }
        );
        const content = await rawResponse.json();
        let stdoutElem = document.getElementById('stdout');
        stdoutElem.textContent = content['stdout'];
        let stderrElem = document.getElementById('stderr');
        stderrElem.textContent = content['stderr'];
        let successElem = document.getElementById('success');
        successElem.textContent = content['success'] ? 'Success !' : '';
      } catch (err) {
        console.log(err);
      }
    }
  </script>
</html>
